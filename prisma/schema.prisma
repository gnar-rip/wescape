// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Auth.js standard tables (from the adapter) ---
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String  @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  defaultRSN    String?

  // local Auth
  username    String  @unique
  passwordHash String

  // custom relationships
  rsProfiles    RSProfile[]
  goals         Goal[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Your app-specific tables ---

// A RuneScape profile a user wants to track
model RSProfile {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rsn       String   // RuneScape username
  mode      String   // main, ironman, etc. (or leave null and track all)
  createdAt DateTime @default(now())
  goals     Goal[]
}

// A custom goal the user defines
model Goal {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rsProfileId String?
  rsProfile   RSProfile? @relation(fields: [rsProfileId], references: [id])
  title       String
  description String?
  targetLevel Int?      // optional e.g. "get 99 Slayer"
  targetXP    Int?      // optional
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
}
